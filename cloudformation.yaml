AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for an EC2 instance with Git, Docker, and Docker Compose'

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    ConstraintDescription: Must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Default: cs16

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  DockerImage:
    Description: Docker image to run
    Type: String
    Default: cajuclc/cstrike-docker:latest
    ConstraintDescription: Must be a valid Docker image name.

Resources:
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instance with Docker
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
        Description: SSH access
      - IpProtocol: tcp
        FromPort: 27015
        ToPort: 27015
        CidrIp: 0.0.0.0/0
        Description: TCP 27015 access
      - IpProtocol: udp
        FromPort: 27015
        ToPort: 27015
        CidrIp: 0.0.0.0/0
        Description: UDP 27015 access

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups:
      - !Ref EC2SecurityGroup
      KeyName: !Ref KeyName
      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
      
          #!/bin/bash -xe

          # Log all output for debugging
          sudo exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

          # Update system packages
          sudo echo "Updating system packages..."
          sudo yum update -y

          # Install Git
          sudo echo "Installing Git..."
          sudo yum install -y git

          # For Amazon Linux 2
          if grep -q "Amazon Linux 2" /etc/os-release; then
            echo "Detected Amazon Linux 2. Installing Docker..."
            amazon-linux-extras install -y docker
            systemctl enable docker
            systemctl start docker
            
            # Install Docker Compose
            echo "Installing Docker Compose..."
            DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
            curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
          else
            # For Amazon Linux 2023
            sudo echo "Detected Amazon Linux 2023. Installing Docker..."
            sudo dnf install -y docker
            sudo systemctl enable docker
            sudo systemctl start docker
            
            # Install Docker Compose
            sudo echo "Installing Docker Compose..."
            sudo dnf install -y docker-compose-plugin
            sudo ln -sf /usr/libexec/docker/cli-plugins/docker-compose /usr/bin/docker-compose
          fi

          # Add ec2-user to docker group
          sudo usermod -a -G docker ec2-user

          # Verify installations
          sudo echo "Verifying installations..."
          git --version
          docker --version
          docker-compose --version || docker compose version

          # Create a docker-compose.yml file
          echo "Setting up Docker container..."
          mkdir -p /opt/app
          cat > /opt/app/docker-compose.yml << 'EOL'
          version: '3'
          services:
            app:
              image: ${DockerImage}
              restart: always
              ports:
                - "27015:27015/tcp"
                - "27015:27015/udp"
          EOL

          # Run the container
          cd /opt/app
          docker-compose up -d || docker compose up -d

          echo "Setup complete!"

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c55b159cbfafe1f0
    us-east-2:
      AMI: ami-002068ed284fb165b
    us-west-1:
      AMI: ami-0d382e80be7ffdae5
    us-west-2:
      AMI: ami-0a36eb8fadc976275
    eu-west-1:
      AMI: ami-06ce3edf0cff21f07
    eu-central-1:
      AMI: ami-0b74f796d330ab49c
    ap-northeast-1:
      AMI: ami-0c3fd0f5d33134a76
    ap-southeast-1:
      AMI: ami-0f02b24005e4aec36
    ap-southeast-2:
      AMI: ami-0f767afb799f45102

Outputs:
  InstanceId:
    Description: The Instance ID
    Value: !Ref EC2Instance

  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp

  PublicDNS:
    Description: Public DNS of the EC2 instance
    Value: !GetAtt EC2Instance.PublicDnsName
